// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id                    String                @id @default(cuid())
  username              String                @unique
  password              String 
  createdAt             DateTime              @default(now())
  updatedAt             DateTime              @updatedAt
  friends               Friend[]              @relation("UserAsFriend")
  friendsWith           Friend[]              @relation("UserFriendsWith")
  sentRequests          FriendRequest[]       @relation("SentRequests")
  receivedRequests      FriendRequest[]       @relation("ReceivedRequests")
  chats                 ChatParticipant[]
  messages              Message[]
  groupInvitesSent      GroupInvite[]         @relation("GroupInviter") 
  groupInvitesReceived  GroupInvite[]         @relation("GroupInvitee")
  profile               Profile?              @relation("userProfile")
}

model Profile {
  id                String           @id @default(cuid())
  name              String?
  avatar            String?
  coverImage        String?
  bio               String?
  languages         String[]
  location          String?
  instagram         String?
  x                 String?
  discord           String?
  interests         String[]
  userId            String          @unique
  user              User            @relation("userProfile", fields: [userId], references: [id])
}
model Friend {
  id        String      @id @default(cuid())
  userId    String
  friendId  String
  user      User        @relation("UserAsFriend", fields: [userId], references: [id])
  friend    User        @relation("UserFriendsWith", fields: [friendId], references: [id])
  createdAt DateTime    @default(now())

  @@unique([userId, friendId])
}

model FriendRequest {
  id         String     @id @default(cuid())
  sender     User       @relation("SentRequests", fields: [senderId], references: [id])
  senderId   String
  receiver   User       @relation("ReceivedRequests", fields: [receiverId], references: [id])
  receiverId String
  status     Status     @default(PENDING)
  createdAt  DateTime   @default(now())
  updatedAt  DateTime   @updatedAt

  @@unique([senderId, receiverId])
}

enum ChatType {
  PRIVATE
  GROUP
}

model Chat {
  id           String            @id @default(cuid())
  name         String?        
  type         ChatType          
  isPrivate    Boolean          @default(true)
  image        String?
  participants ChatParticipant[]
  messages     Message[]
  lastMessageAt DateTime        @default(now())
  createdAt    DateTime         @default(now())
  updatedAt    DateTime         @updatedAt
  groupInvites GroupInvite[]
}

enum ChatRole {
  OWNER
  ADMIN
  MEMBER
  GUEST
}
model ChatParticipant {
  id        String   @id @default(cuid())
  user      User     @relation(fields: [userId], references: [id])
  userId    String   
  chat      Chat     @relation(fields: [chatId], references: [id])
  chatId    String
  role      ChatRole    
  createdAt DateTime @default(now())

  @@unique([userId, chatId])
}

model Message {
  id        String   @id @default(cuid())
  sender    User     @relation(fields: [senderId], references: [id])
  senderId  String
  chat      Chat     @relation(fields: [chatId], references: [id])
  chatId    String
  content   String
  type      String   @default("TEXT")
  createdAt DateTime @default(now())
}

enum Status {
  PENDING
  ACCEPTED
  REJECTED
}
model GroupInvite {
  id          String   @id @default(cuid())
  chat        Chat     @relation(fields: [chatId], references: [id])
  chatId      String
  inviter     User     @relation("GroupInviter", fields: [inviterId], references: [id])
  inviterId   String
  invitee     User     @relation("GroupInvitee", fields: [inviteeId], references: [id])
  inviteeId   String
  status      Status   @default(PENDING) 
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  expiresAt   DateTime 
  
  @@unique([chatId, inviteeId])
}
